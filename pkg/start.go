package pkg

import (
	"fmt"
	"os"
	"strings"

	"github.com/akamensky/argparse"
	"github.com/projectdiscovery/gologger"

	"geniuszly.GenGoPortScanner/internal/portscanner"
	"geniuszly.GenGoPortScanner/internal/portscanner/parse"
)

const banner = `
    __
 __/  \__       GenGoPortScanner   –°–∫–∞–Ω–µ—Ä –ø–æ—Ä—Ç–æ–≤. üêØ
/  \__/  \__
\__/  \__/  \   –í–µ—Ä—Å–∏—è  1.0.0
   \__/  \__/   –ê–≤—Ç–æ—Ä   @geniuszly

`

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
func Start() {
	fmt.Printf("%s", banner)

	parser := argparse.NewParser("GenGoPortScanner", "–°–∫–∞–Ω–µ—Ä –ø–æ—Ä—Ç–æ–≤. üêØ")
	target := parser.String("t", "target", &argparse.Options{Required: true, Help: "–¶–µ–ª–µ–≤–æ–π CIDR –∏–ª–∏ —Ñ–∞–π–ª —Å —Ü–µ–ª—è–º–∏"})
	portRange := parser.String("p", "ports", &argparse.Options{Required: true, Help: "–î–∏–∞–ø–∞–∑–æ–Ω—ã –ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"})
	threads := parser.Int("c", "threads", &argparse.Options{Required: true, Help: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤"})
	timeout := parser.Int("", "timeout", &argparse.Options{Required: true, Help: "–¢–∞–π–º–∞—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"})
	retries := parser.Int("r", "retries", &argparse.Options{Required: false, Help: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–∏–Ω–≥–∞", Default: 1})
	outputFile := parser.String("o", "output", &argparse.Options{Required: false, Help: "–§–∞–π–ª –≤—ã–≤–æ–¥–∞", Default: nil})
	outputFmt := parser.String("f", "format", &argparse.Options{Required: false, Help: "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (qubo/json/csv)", Default: "qubo"})

	if err := parser.Parse(os.Args); err != nil {
		fmt.Print(parser.Usage(err))
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	if *target == "" || *portRange == "" || *threads <= 0 || *timeout <= 0 {
		fmt.Print(parser.Usage(nil))
		return
	}

	hosts := parse.ParseTarget(*target)
	ports := parse.ParsePorts(*portRange)

	var output string
	if *outputFile == "" {
		output = fmt.Sprintf("%s.GenGoPortScanner.txt", strings.ReplaceAll(*target, "/", "_"))
	} else {
		output = *outputFile
	}

	f, err := os.OpenFile(output, os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0755)
	if err != nil {
		gologger.Fatal().Msg("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –≤—ã–≤–æ–¥–∞: " + err.Error())
	}
	f.Close()

	gologger.Info().Msg("–§–∞–π–ª –≤—ã–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ '" + output + "'")

	scanner := portscanner.NewPortScanner(hosts, ports, *timeout, *retries, *threads, output, *outputFmt)
	scanner.Scan()

	gologger.Info().Msg("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
}
